function output_to_plot(s,plot_flag)
% Function for combining output data files generated by Look@NanoSIMS
% into a matrix according to the meta-instructions defined in a specified
% meta-file. These data will be plotted with a specific legend scheme and
% also exported into a data file.
% (c) Lubos Polerecky, 14.10.2009, MPI Bremen
% 08-07-2010: this function is now called by the process_metafile GUI,
% where all the settings are specified by the used and passed here.
% 26-03-2011: implemented for up to 6 variables
% 20-05-2020: major revision of the way the data is loaded from individual
% files, how it is exported, and plotted into 2D and 3D scatter plots.

if nargin==1
    plot_flag=1;
end

plot2d = s.plot2d;
global verbose

fprintf(1,'\n\n\nMetafile processing: output_to_plot.m\n');

if(exist(s.base_dir)~=7 || exist(s.metafile)~=2)
    disp(['WARNING: Dataset directory or metafile does not exist. Nothing done.']);
else

    %% form the final output file basename
    [pathstr, name, ~] = fileparts(s.metafile);
    foutname = [pathstr,delimiter,name];
    if ~isfolder(foutname)
        mkdir(foutname);
    end
    foutname = [foutname delimiter name];

    %% get instructions from the meta file
    all_cell_types = regexprep(s.cellclasses,' ','');
    if isempty(all_cell_types)
        all_cell_types=[];
    end
    [id,fname,tmnt,ct,xyz,nf,varnames,plot3d,basedir]=getmetainstructions(s.metafile, all_cell_types, s.plot3d);
    tmnt = cell2mat(tmnt);
    
    if ~isempty(basedir)
        if isfolder(basedir)
            s.base_dir = basedir;
        end
    end
        
    %% read data from all specified input files
    % note that corrections will also be applied in this step!!
    [t1, t2, xyz, varnames] = read_data_from_input_files(s, fname, xyz, ct, tmnt, varnames);
    
    %% export all gathered data to an output text file
    export_data_from_input_files(varnames, foutname, t1, t2);

    %% plot data as 2d or 3d graphs
    
    f2=[]; f3=[]; f4=[]; f5=[]; f6=[];
    t2 = table2array(t2);
    
    %% plot data as 2d scatter plots
    if plot2d               
        
        epsdir = [pathstr delimiter name delimiter 'eps'];
        if ~isfolder(epsdir)
            mkdir(epsdir);
            if verbose>1
                fprintf(1,'Directory %s did not exist, so it was created.\n',epsdir);
            end
        end

        fprintf(1,'Plotting 2D graph: ');
        
        %% plot x1 vs y1
        if length(varnames{1})>1
            fig = 61;
            xscale = s.xscale1;
            yscale = s.yscale1;
            logscalex = s.logscale.x1;
            logscaley = s.logscale.y1;
            xlab=varnames{1}{1};
            ylab=varnames{1}{2};
            [f2, pdffile2, cls_sel, tmnt_sel]=plot_data_2d(plot_flag, fig, ...
                t2(:,[1 3]), t2(:,[2 4]), t1, ...
                xlab, ylab, s, xscale, yscale, logscalex, logscaley, pathstr, name);
        end
               
        %% plot x2 vs y2
        if(length(varnames{1})>3)
            fig = 62;
            xscale = s.xscale2;
            yscale = s.yscale2;
            logscalex = s.logscale.x2;
            logscaley = s.logscale.y2;
            xlab=varnames{1}{3};
            ylab=varnames{1}{4};
            [f3, pdffile3, cls_sel, tmnt_sel]=plot_data_2d(plot_flag, fig, ...
                t2(:,[5 7]), t2(:,[6 8]), t1, ...
                xlab, ylab, s, xscale, yscale, logscalex, logscaley, pathstr, name);        
        end
        
        %% plot x3 vs y3
        if(length(varnames{1})>5)
            fig = 63;
            xscale = s.xscale3;
            yscale = s.yscale3;
            logscalex = s.logscale.x3;
            logscaley = s.logscale.y3;
            xlab=varnames{1}{5};
            ylab=varnames{1}{6};
            [f4, pdffile4, cls_sel, tmnt_sel]=plot_data_2d(plot_flag, fig, ...
                t2(:,[9 11]), t2(:,[10 12]), t1, ...
                xlab, ylab, s, xscale, yscale, logscalex, logscaley, pathstr, name);
        end
       
        %% export graphs
        if plot_flag == 1
            j=0;
            pdffile=[];
            if ~isempty(f2)
                j=j+1;
                pdffile{j}=pdffile2;
            end
            if ~isempty(f3)
                j=j+1;
                pdffile{j}=pdffile3;
            end
            if ~isempty(f4)
                j=j+1;
                pdffile{j}=pdffile4;
            end
            %create_pdf_output(pathstr, name, pdffile, '-2D-all', s);
        end
        
        if plot_flag == 2
            if ~isempty(f2)
                create_pdf_output(pathstr, name, pdffile2, ['-' varnames{1}{1} '--' varnames{1}{2} '-sep'], s);
            end
            if ~isempty(f3)
                create_pdf_output(pathstr, name, pdffile3, ['-' varnames{1}{3} '--' varnames{1}{4} '-sep'], s);
            end
            if ~isempty(f4)
                create_pdf_output(pathstr, name, pdffile4, ['-' varnames{1}{5} '--' varnames{1}{6} '-sep'], s);
            end
        end
        
        fprintf(1,'Done with plotting.\n')
        
    else
        close_figures(f2);
        close_figures(f3);
        close_figures(f4);
    end

    %% plot data as 3D scatter plots
    if plot3d                        
        
        epsdir = [pathstr delimiter name delimiter 'eps'];
        if ~isfolder(epsdir)
            mkdir(epsdir);
            if verbose>1
                fprintf(1,'Directory %s did not exist, so it was created.\n',epsdir);
            end
        end
              
        fprintf(1,'Plotting 3D graph: ');
        
        %% plot 1 vs 2 vs 3
        if length(varnames{1})>2
            fig = 64;
            xscale = s.xscale1;
            yscale = s.yscale1;
            zscale = s.xscale2;
            logscalex = s.logscale.x1;
            logscaley = s.logscale.y1;
            logscalez = s.logscale.x2;
            xlab=varnames{1}{1};
            ylab=varnames{1}{2};
            zlab=varnames{1}{3};
            if plot_flag % plot in the same graph
                [f5, pdffile5, cls_sel, tmnt_sel]=plot_data_3d(fig, ...
                    t2(:,[1 3 5]), t2(:,[2 4 6]), t1, ...
                    xlab, ylab, zlab, s, xscale, yscale, zscale, logscalex, logscaley, logscalez, pathstr, name);
            else
                fprintf(1,'WARNING: Plotting 3D graphs separately for each dataset not implemented. Sorry.\n');
            end
        end
                
        %% plot 4 vs 5 vs 6
        if length(varnames{1})>5
            fig = 65;
            xscale = s.yscale2;
            yscale = s.xscale3;
            zscale = s.yscale3;
            logscalex = s.logscale.y2;
            logscaley = s.logscale.x3;
            logscalez = s.logscale.y3;
            xlab=varnames{1}{4};
            ylab=varnames{1}{5};
            zlab=varnames{1}{6};
            if plot_flag % plot in the same graph
                [f6, pdffile6, cls_sel, tmnt_sel]=plot_data_3d(fig, ...
                    t2(:,[7 9 11]), t2(:,[8 10 12]), t1, ...
                    xlab, ylab, zlab, s, xscale, yscale, zscale, logscalex, logscaley, logscalez, pathstr, name);
            else
                fprintf(1,'WARNING: Plotting 3D graphs separately for each dataset not implemented. Sorry.\n');
            end            
        end
        
        %% export graphs
        if plot_flag == 1
            j=0;
            pdffile=[];
            if ~isempty(f5)
                j=j+1;
                pdffile{j}=pdffile5;
            end
            if ~isempty(f6)
                j=j+1;
                pdffile{j}=pdffile6;
            end

            %create_pdf_output(pathstr, name, pdffile, '-3D-all', s);
        end
        
    else
        close_figures(f5);
        close_figures(f6);
    end

    %% display legend in the console
    if plot2d || plot3d
        %cls_sel  = regexprep(s.cellclasses,' ','');
        cls_col = regexprep(s.cellcolors,' ','');
        cls_col = cls_col(1:length(cls_sel));
        %tmnt_sel = str2num(s.treatments);
        tmnt_symb = regexprep(s.symbols,' ','');
        tmnt_symb = tmnt_symb(1:length(tmnt_sel));
        fprintf(1,'\n============ LEGEND =====================\n')
        fprintf(1,'ROI class: '); 
        fprintf(1,'\t%c',regexprep(cls_sel,' ',''));
        fprintf(1,'\n');
        fprintf(1,'ROI color: '); 
        fprintf(1,'\t%c',regexprep(cls_col,' ',''));
        fprintf(1,'\n');
        fprintf(1,'------------------------------------------\n');
        fprintf(1,'treatment ID    : ');
        fprintf(1,'\t%d',tmnt_sel);
        fprintf(1,'\n');
        fprintf(1,'treatment symbol: ');        
        fprintf(1,'\t%c',tmnt_symb);
        fprintf(1,'\n');
        fprintf(1,'==========================================\n');
    end
    
    if plot2d
        fprintf('NOTE: Click on DATA TIPS and then on individual data points to see annotations.\n')
    end
    
    %% add a button for fitting data to each graph
    if ~isempty(f2)
        figure(f2)
        fb1 = findobj('tag','fit_button1');
        if isempty(fb1)
            btn1 = uicontrol(f2,'Style', 'pushbutton', 'String', 'Fit data',...
                'Units','normalized', 'Position', [0.002 0.002 0.15 0.05],...
                'BackgroundColor',[0 0.6 0],'ForegroundColor',[1 1 1],'FontWeight', 'bold', ...
                'Callback', @getstats_in_2D_plot,'tag','fit_button1', ...
                'Tooltip','Draw a polygon and calculate statistics on data inside it.');
        end    
    end
    
    if ~isempty(f3)
        figure(f3)
        fb2 = findobj('tag','fit_button2');
        if isempty(fb2)
            btn2 = uicontrol(f3,'Style', 'pushbutton', 'String', 'Fit data',...
                'Units','normalized', 'Position', [0.002 0.002 0.15 0.05],...
                'BackgroundColor',[0 0.6 0],'ForegroundColor',[1 1 1],'FontWeight', 'bold', ...
                'Callback', @getstats_in_2D_plot,'tag','fit_button2', ...
                'Tooltip','Draw a polygon and calculate statistics on data inside it.');
        end    
    end
    
    if ~isempty(f4)
        figure(f4)
        fb3 = findobj('tag','fit_button3');
        if isempty(fb3)
            btn3 = uicontrol(f4,'Style', 'pushbutton', 'String', 'Fit data',...
                'Units','normalized', 'Position', [0.002 0.002 0.15 0.05],...
                'BackgroundColor',[0 0.6 0],'ForegroundColor',[1 1 1],'FontWeight', 'bold', ...
                'Callback', @getstats_in_2D_plot,'tag','fit_button3', ...
                'Tooltip','Draw a polygon and calculate statistics on data inside it.');
        end    
    end    
    
    
end


%% local function: plot_data_2d
function [f2, pdffile, cls_sel, tmnt_sel]=plot_data_2d(plot_flag, fig, xyz, dxyz, roi_prop, ...
    xlab, ylab, s, xscale, yscale, logscalex, logscaley, pathstr, name)

if plot_flag == 1 
    %% plot in the same graph
    [f2, pdffile, cls_sel, tmnt_sel] = plot_data_2dall(fig, xyz, dxyz, roi_prop, ...
        xlab, ylab, s, xscale, yscale, logscalex, logscaley, pathstr, name);
elseif plot_flag == 2 
    %% plot each dataset in a separate graph
    [f2, pdffile, cls_sel, tmnt_sel] = plot_data_2dsep(100*fig, xyz, dxyz, roi_prop, ...
        xlab, ylab, s, xscale, yscale, logscalex, logscaley, pathstr, name);
end


%% local function: plot_data_2dall
function [f2, pdffile, cls_sel, tmnt_sel]=plot_data_2dall(fig, xyz, dxyz, roi_prop, ...
    xlab, ylab, s, xscale, yscale, logscalex, logscaley, pathstr, name)    

global additional_settings;

%f2=my_figure(fig);
f2=figure(fig);
ax=subplot(1,1,1);
% make sure ax is linked to f2
%set(ax,'Parent',f2);
hold off;

%% add data to the graph
fprintf(1,'adding data in a 2D plot ... ');
[cls_sel, tmnt_sel]=add_to_plot2d(ax,xyz(:,1),xyz(:,2),dxyz(:,1),dxyz(:,2),roi_prop, ...
    xlab, ylab, xscale,yscale,logscalex,logscaley, s);
fprintf(1,'done\n');

%% export graphics
fbs = ['fit_button' num2str(fig-60)];
fb = findobj('tag',fbs);
if ~isempty(fb)
    set(fb,'visible','off');
end
pdffile = [name '-' xlab '--' ylab '-all'];
%pdffile = regexprep(pdffile,'/','-');
pdffile= [convert_string_for_texoutput(pdffile) '.eps'];
fn = [pathstr delimiter name delimiter pdffile];
print_figure(f2,fn,additional_settings.print_factors(2));
%fprintf(1,'EPS output generated in %s\n',fn);
mepstopdf(fn,'epstopdf',1,1,0);
fn = regexprep(fn,'eps','pdf');
fn = regexprep(fn,'\','/');
pdffile = regexprep(pdffile,'eps','pdf');    
pdffile = regexprep(pdffile,'\','/'); 
%invoke the datacursormode so that we can set the UpdateFcn
%par1=get(ax,'OuterPosition');
%par2=get(ax,'Position');
%par3=get(ax,'PlotBoxAspectRatio');
hdt = datacursormode(f2);
%set(hdt,'DisplayStyle','window');
set(hdt,'UpdateFcn',{@lanstips});
hdt = datacursormode(f2);
if ~isempty(fb)
    set(fb,'visible','on');
end
%set(ax,'OuterPosition',par1);
%set(ax,'Position',par2);
%set(ax,'PlotBoxAspectRatio',par3);


%% local function: plot_data_2dsep
function [f2, pdffile, cls_sel, tmnt_sel]=plot_data_2dsep(fig, xyz, dxyz, roi_prop, ...
    xlab, ylab, s, xscale, yscale, logscalex, logscaley, pathstr, name)    

global additional_settings;

file_id = roi_prop.id;
ufile_id = unique(file_id);

for j=1:length(ufile_id)
    
    ind_sel = find(file_id==ufile_id(j));
    
    f2{j}=my_figure(fig+j);
    ax=subplot(1,1,1); 
    hold off;

    %% add data to the graph
    [cls_sel, tmnt_sel]=add_to_plot2d(ax,xyz(ind_sel,1),xyz(ind_sel,2),dxyz(ind_sel,1),dxyz(ind_sel,2),roi_prop(ind_sel,:),...
        xlab, ylab, xscale,yscale,logscalex,logscaley,s);
    
    fname_j = roi_prop.file{ind_sel(1)};
    fprintf(1,'Displayed data-set %d: %s [%s %s] (treatment %d)\n',j,fname_j,xlab,ylab,roi_prop.treatment(ind_sel(1)));

    %% export graphics
    pdffile{j} = [fname_j '-' xlab '--' ylab];
    pdffile{j} = convert_string_for_texoutput(pdffile{j});
    pdffile{j} = regexprep(pdffile{j},'_','-');
    %pdffile{j} = regexprep(pdffile{j},'/','-');        
    pdffile{j} = ['eps' delimiter pdffile{j} '.eps'];
    fn = [pathstr delimiter name delimiter pdffile{j}];
    print_figure(f2{j},fn,additional_settings.print_factors(2));
    %fprintf(1,'EPS output generated in %s\n',fn);
    mepstopdf(fn,'epstopdf',1,1,0);
    fn = regexprep(fn,'\.eps','\.pdf');
    fn = regexprep(fn,'\','/');
    pdffile{j} = regexprep(pdffile{j},'\.eps','\.pdf');    
    pdffile{j} = regexprep(pdffile{j},'\','/');    
    %invoke the datacursormode so that we can set the UpdateFcn
    hdt = datacursormode;
    %set(hdt,'DisplayStyle','window');
    set(hdt,'UpdateFcn',{@lanstips});
    hdt = datacursormode;
    
end


%% local function: plot_data_3d
function [f5, pdffile,cls_sel, tmnt_sel]=plot_data_3d(fig, xyz, dxyz, roi_prop, ...
    xlab, ylab, zlab, s, xscale, yscale, zscale, logscalex, logscaley, logscalez, pathstr, name) 

global additional_settings;

f5=my_figure(fig); 
ax=subplot(1,1,1); 
hold off;

%% add data to the graph
fprintf(1,'adding data in a 3D plot ... ');
[cls_sel, tmnt_sel]=add_to_plot3d(ax,xyz(:,1),xyz(:,2),xyz(:,3), dxyz(:,1),dxyz(:,2),dxyz(:,3),roi_prop, ...
    xlab, ylab, zlab, xscale,yscale,zscale, logscalex,logscaley,logscalez, s);
fprintf(1,'done\n');

%% export graphics
pdffile = [name '-' xlab '--' ylab '--' zlab '-all'];
%pdffile = regexprep(pdffile,'/','-');
pdffile= [convert_string_for_texoutput(pdffile) '.eps'];
fn = [pathstr delimiter name delimiter pdffile];
print_figure(f5,fn,additional_settings.print_factors(2));
%fprintf(1,'EPS output generated in %s\n',fn);
mepstopdf(fn,'epstopdf',1,1,0);   
fn = regexprep(fn,'eps','pdf');
fn = regexprep(fn,'\','/');
pdffile = regexprep(pdffile,'eps','pdf');    
pdffile = regexprep(pdffile,'\','/');
f5=my_figure(fig);


%% local function: close_figures
function close_figures(f)
if ~isempty(f)
    if iscell(f)
        for ii=1:length(f)
            close(f{ii});
        end
    else
        close(f);
    end
end


%% local function: create_pdf_output
function create_pdf_output(pathstr, name, pdffile2, file_ext, s)                
fname = [name file_ext '.tex'];
fname = regexprep(fname,'/','-');
fout = [pathstr delimiter name delimiter fname];
fid=fopen(fout,'w');
fprintf(fid,'\\documentclass[12pt,a4paper]{article}\n','');
fprintf(fid,'\\usepackage{graphicx}\n','');
fprintf(fid,'\\usepackage[left=1in,right=1in,top=1in,bottom=1in]{geometry}\n','');
fprintf(fid,'\\usepackage[bookmarksopen=true,pdfauthor=Look@NanoSIMS,pdftitle=%s]{hyperref}\n',...
    regexprep(s.metafile,'\','/'));
fprintf(fid,'\\begin{document}\n','');
k=1;
for j=1:length(pdffile2)
    if k==1
        fprintf(fid,'\n\\begin{tabular}{cc}\n');
        fprintf(fid,'\\includegraphics[width=0.49\\textwidth]{%s}\n&\n',pdffile2{j});
        k=k+1;
    elseif k==2
        fprintf(fid,'\\includegraphics[width=0.49\\textwidth]{%s}\n',pdffile2{j});
        fprintf(fid,'\\end{tabular}\n');
        k=1;
    end
end 
if k==2
    fprintf(fid,'\\end{tabular}\n');
end
fprintf(fid,'\\end{document}\n');
fclose(fid);
fprintf(1,'Output written to %s\n',fout);
% compile the tex file to create a PDF output
mepstopdf(fout,'pdflatex',0);
mepstopdf(fout,'pdflatex',1);
